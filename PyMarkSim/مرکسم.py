import os
from subprocess import run as چلو
import numpy as نمپی
import calendar
from pkg_resources import resource_filename as وسائل_کا_نام
from PyMarkSim import لغت_قابو

#
مسل_مرکسم = لغت_قابو['مسل_مرکسم']  #
path_gcm_data = os.path.join(مسل_مرکسم, 'gcm5data')  #

#
راستہ_سانچے = وسائل_کا_نام('PyMarkSim', 'سانچے.CLI')


class مقام(object):
    def __init__(خود, چوڑائی, طول, بلندی):
        خود.چوڑائی = چوڑائی
        خود.طول = طول
        خود.بلندی = بلندی

        خود.اعداد = None

    def پیشنگوئی_کرنا(خود, پہلا_سال, آخرا_سال, ار_سی_پی):
        # 'rcp26', 'rcp45', 'rcp60' یا 'rcp85'

        #
        if آخرا_سال < پہلا_سال:
            raise ValueError('پہلا سال اکر سال کے پہلہ ینا ہے.')
        if آخرا_سال > 2099 or پہلا_سال < 2013:
            raise ValueError('سال ٢٠١٢ اور ٢٠٩٩ کے بچ میں ہونے پڑتے ہیں.')

        with open(راستہ_سانچے) as م:
            سانچے = م.readlines()

        #
        for س, قطار in enumerate(سانچے):
            سانچے[س] = قطار.format(LAT=خود.چوڑائی, LONG=خود.طول, ELEV=خود.بلندی)

        #
        راستہ_موجودہ = os.path.dirname(os.path.realpath(__file__))

        #
        with open(os.path.join(راستہ_موجودہ, 'PYTH.CLI'), 'w') as م:
            م.write(''.join(سانچے))

        #
        ش_مہینہ = (آخرا_سال - پہلا_سال + 1) * 12
        فہرست_مہینہ = نمپی.empty(ش_مہینہ)
        فہرست_سال = نمپی.empty(ش_مہینہ)
        درجہ_حرارت_زیادہ_م  = نمپی.empty(ش_مہینہ, dtype=float)
        درجہ_حرارت_کم_م = نمپی.empty(ش_مہینہ, dtype=float)
        درجہ_حرارت_اوسط_م = نمپی.empty(ش_مہینہ, dtype=float)
        شمسی_تابکاری_م = نمپی.empty(ش_مہینہ, dtype=float)
        مہینہ_بارش = نمپی.empty(ش_مہینہ, dtype=float)

        # ہر سال کے لئے...
        for سال in range(پہلا_سال, آخرا_سال + 1):

            #
            args = dict(
                مسل_مرکسم=مسل_مرکسم,
                راستہ_١=path_gcm_data,
                راستہ_٢=راستہ_موجودہ,
                سانچے='11111111111111111',
                ار_سی_پی=ار_سی_پی,
                سال=سال,
                تکرار=1,
                بھیج=1313
            )

            #
            فرمان = '{مسل_مرکسم} {راستہ_١} {راستہ_٢} {سانچے} {ار_سی_پی} {سال} {تکرار} {بھیج}'.format(**args)

            #
            چلو(فرمان)

            #
            mks_output_file_name = 'PYTH{0}01.WTG'.format(str(سال)[-2:])
            mks_output_file = os.path.join(راستہ_موجودہ, 'PYTH', '11111111111111111', ار_سی_پی, str(سال),
                                           mks_output_file_name)

            #
            with open(mks_output_file, 'r') as م:
                #
                عنوان = ''
                while '@DATE' not in عنوان:
                    عنوان = م.readline()

                ستون_کا_نام = عنوان.split()
                #
                پیداوار = م.readlines()

            #
            دن = [ب[ستون_کا_نام.index('@DATE')] for ب in پیداوار]
            شمسی_تابکاری = نمپی.array([float(ب.split()[ستون_کا_نام.index('SRAD')]) for ب in پیداوار if ب != '\n'])
            درجہ_حرارت_زیادہ = نمپی.array([float(ب.split()[ستون_کا_نام.index('TMAX')]) for ب in پیداوار if ب != '\n'])
            درجہ_حرارت_کم = نمپی.array([float(ب.split()[ستون_کا_نام.index('TMIN')]) for ب in پیداوار if ب != '\n'])
            بارش = نمپی.array([float(ب.split()[ستون_کا_نام.index('RAIN')]) for ب in پیداوار if ب != '\n'])

            #
            درجہ_حرارت_اوسط = نمپی.add(درجہ_حرارت_زیادہ, درجہ_حرارت_کم) / 2

            #
            for م in range(12):
                مہینہ_لمبائی = calendar.monthrange(سال, month=م + 1)
                شروع = مہینہ_لمبائی[0] - 1
                اختتام = مہینہ_لمبائی[1] - 1

                مہینہ_شمار = م + (سال - پہلا_سال) * 12
                فہرست_مہینہ[مہینہ_شمار] = م + 1
                فہرست_سال[مہینہ_شمار] = سال
                درجہ_حرارت_زیادہ_م [مہینہ_شمار] = نمپی.mean(درجہ_حرارت_زیادہ[شروع: اختتام])
                درجہ_حرارت_کم_م[مہینہ_شمار] = نمپی.mean(درجہ_حرارت_کم[شروع: اختتام])
                درجہ_حرارت_اوسط_م[مہینہ_شمار] = نمپی.mean(درجہ_حرارت_اوسط[شروع: اختتام])
                شمسی_تابکاری_م[مہینہ_شمار] = نمپی.mean(شمسی_تابکاری[شروع: اختتام])

                # پر ہر دن کا بارش جوڈکے دینا ہے (اور اوسط دینا نہیں).
                مہینہ_بارش[مہینہ_شمار] = نمپی.sum(بارش[شروع: اختتام])

            خود.اعداد = {
                'دن': {
                    'دن': دن,
                    'شمسی_تابکاری': شمسی_تابکاری,
                    'درجہ_حرارت_زیادہ': درجہ_حرارت_زیادہ,
                    'درجہ_حرارت_کم': درجہ_حرارت_کم,
                    'بارش': بارش,
                    'درجہ_حرارت_اوسط': درجہ_حرارت_اوسط
                },
                'مہینہ': {
                    'فہرست_مہینہ': فہرست_مہینہ,
                    'فہرست_سال': فہرست_سال,
                    'درجہ_حرارت_زیادہ_م ': درجہ_حرارت_زیادہ_م ,
                    'درجہ_حرارت_کم_م': درجہ_حرارت_کم_م,
                    'درجہ_حرارت_اوسط_م': درجہ_حرارت_اوسط_م,
                    'شمسی_تابکاری_م': شمسی_تابکاری_م,
                    'مہینہ_بارش': مہینہ_بارش
                }
            }

    def بچانا(خود, مسل_پیداوار):

        اعداد = خود.اعداد
        if اعداد is None:
            raise ValueError

        اعداد_م = اعداد['مہینہ']

        #
        عنوان_سی_یس_وی = ','.join(['سال', 'مہینہ', 'حرارت_زیاد', 'حرارت_کم', 'حرارت_اوسط', 'شمسی'])

        اعداد_سی_یس_وی = [عنوان_سی_یس_وی]

        list_data = [اعداد_م['فہرست_سال'], اعداد_م['فہرست_مہینہ'], اعداد_م['درجہ_حرارت_زیادہ_م'],
                     اعداد_م['درجہ_حرارت_کم_م'], اعداد_م['درجہ_حرارت_اوسط_م'], اعداد_م['شمسی_تابکاری_م']]

        آخرا_سال = نمپی.max(خود.اعداد['فہرست_مہینہ'])
        پہلا_سال = نمپی.min(خود.اعداد['فہرست_مہینہ'])

        for مہینہ in range((آخرا_سال - پہلا_سال + 1) * 12):  #
            اعداد_م = [x[مہینہ] for x in list_data]
            اعداد_سی_یس_وی.append(','.join(اعداد_م))

        with open(مسل_پیداوار, 'w') as م:
            م.write(''.join(اعداد_سی_یس_وی))
